SICP
学习地址：https://github.com/DeathKing/Learning-SICP

Lec1a：Lisp 概览
https://v.youku.com/v_show/id_XNTEzMDAyMTU2.html?f=18958522

1. 黑盒抽象 约定接口
2. 元语言抽象
	递归
	
Lec1b：计算过程
1. 组合模式	代换模型
2. lambda
3. 迭代 与 递归(推迟计算)
	时间 空间
	
	Iteration(x, y)
		if x = 0
			return y;
		else
			return (x - 1) + (y + 1);
	(3 4)
	(2 5)
	(1 6)
	(0 7)
	7
	time = O(x)
	space = O(1)
	
	Recursion(x, y)
		if x = 0
			return y;
		else
			return 1 + ((x - 1) + y);
	(3 4)
	(1 + (2 + 4))
	(1 + (1 + (1 + 4)))
	(1 + (1 + (1 + (0 + 4))))
	(1 + (1 + (1 + 4)))
	(1 + (1 + 5))
	(1 + 6)
	7
	time = O(x)
	space = O(x)

Lec2a：高阶过程
https://www.bilibili.com/video/av8515129/index_2.html#page=3
1. 公共模式
	将[过程]作用于[参数]。Lambda 表达式，作为匿名函数。
 	将[过程]作为结果返回。
	
	过程用于计算，也可作为 输入参数，还可以作为输出参数。
	
Lec2b：复合函数
1. 建立层次化的中心思想（制定契约，并不需要关心具体的实现）
2. 表结构
	(cons x y) 序对（字典）
	(car p) 取 cons 的第一部分
	(cdr p) 取 cons 的第二部分
3. 数据抽象 （通过构造函数和选择函数，将数据的使用与表示分离）	
4. 闭包
5. 契约

Lec3a：Escher 的例子
1. LIST 将序对（字典）组合到一起，cdr 指向下一个元素（若存在）
2. 关注策略本身，而不是控制结构
3. 闭包性质（过程具有闭包性质）
4. [过程]与[数据]没有什么差别，过程也是数据，数据也是过程
5. 将系统以树的形式分解（继承结构，不够健壮，某个节点未设计好会影响其后续的节点）
6. 描述组合的模式 ==> 完整语言 ==> 构建图像

Lec3b：符号化求导程序

Lec4a：模式匹配
1. 模式是用来匹配原表达式的，应用规则会产生一个新的表达式
2. 与其解决一个特定的问题，不然解决一个类问题

Lec4b：通用运算符